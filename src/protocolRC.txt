📝 Final ReactCraft Project Protocol (V 2.2)
Version: 2.2 (Last Updated: October 10, 2025)

Purpose: To guide project development with clear, industry-standard practices, maintain consistency, and document all key architectural decisions.

1. 🛑 Non-Deviation Mandate (Standard Enforcement)
This protocol represents the mandatory standard of professional practice for the ReactCraft project.
No code, structural decision, or architectural change shall be merged that deviates from the rules outlined below. In case of conflicting external advice, this document serves as the single source of truth for all development standards. 
All work must pass automated quality checks (Linting, Formatting) and adhere to the Mobile-First strategy.

2. 🛠️ Technology Stack
Component	Standard	Notes
Frontend	React, Vite	Modern, high-performance tooling.
Styling	CSS Modules, CSS Custom Properties	Scoped styling for reusability; global variables for robust theming.
Backend (Future)	Node.js, Express, MongoDB	Standardized MERN stack for scalable full-stack development.
3. 📱 Responsive Design Strategy: Mobile-First Standard
The project's architecture is based on Progressive Enhancement, starting with the smallest screen and scaling up. This is a mandatory professional standard.

Rule	Implementation Standard
Viewport Meta Tag	The public/index.html file MUST include the standard meta tag: <meta name="viewport" content="width=device-width, initial-scale=1.0">.
Base Styling	All initial CSS must target the narrowest viewport (mobile), containing only the essential layout and styles.
Media Queries	MUST exclusively use min-width queries to progressively add complexity for larger screens (e.g., @media (min-width: 768px)). max-width queries are prohibited for main layout adaptation.
4. 📝 Code Standards & Architecture
Area	Rule / Standard
File Naming
PascalCase.jsx for all React components.
camelCase.js for all pure JavaScript files (hooks, utilities, services).
Component Architecture
The project uses a Component-Centric Architecture following the principle of Colocation. Every component resides in its own dedicated subdirectory.
Primary Component File	For all component directories (e.g., src/components/About/), the main component file MUST be named index.jsx for cleaner import statements.
Styling Location	Global (src/index.css): Reserved only for CSS resets, fonts, and global variables. Component-Specific: All styles must use .module.css for strict scoping.
Component Type	All components MUST be written as Functional Components utilizing React Hooks for state and logic.
Accessibility (A11y)	Development MUST prioritize Semantic HTML (using <header>, <nav>, <main>, etc.) and adhere to ARIA compliance to ensure screen reader compatibility.
5. ✅ Professional Quality Enforcement
Standard	Tool / Action	Rationale
Code Quality	ESLint (e.g., using Airbnb config) and Prettier.	Enforces consistent structure and auto-formats code to save time and reduce style-related review comments.
Enforcement	Linting and formatting MUST be integrated via a pre-commit hook (e.g., Husky) or in the CI/CD pipeline. No code is committed unless it passes linting.	Prevents sub-standard code from entering the repository.
Verification	All new custom hooks, utility functions, and complex logic MUST be covered by Unit Tests (e.g., using Vitest/Jest and React Testing Library).	Prevents regressions (bugs) and ensures long-term stability.
6. 🚀 Compliant Project Path Map (Example)
portfolio2023-main/
├── package.json
├── src/
│   ├── App.jsx
│   ├── App.module.css
│   ├── components/
│   │   ├── About/
│   │   │   ├── index.jsx          <-- RENAMED to index.jsx
│   │   │   └── About.module.css
│   │   ├── Burger/
│   │   │   └── index.jsx          <-- RENAMED to index.jsx
│   │   ├── ContactForm/
│   │   │   └── index.jsx          <-- RENAMED to index.jsx
│   │   ├── Footer/
│   │   │   └── index.jsx          <-- RENAMED to index.jsx
│   │   ├── ProjectCard/
│   │   │   ├── index.jsx
│   │   │   └── ProjectCard.module.css
│   │   └── SocialFollow/
│   │       └── index.jsx
│   ├── hooks/
│   │   └── useTheme.js
│   └── index.css