Updated, concise version of your project protocol.

```
# ReactCraft Project Protocol (portfolio2023-main)

Version: 2.0 (Last Updated: September 20, 2025)

## Purpose
To guide project development with clear standards, maintain consistency, and document key architectural decisions.

---

## 🛠️ Technology Stack
* **Frontend:** React, Vite
* **Styling:** CSS Modules and CSS Custom Properties (Variables) for robust theming.
* **Future Backend:** Node.js, Express, MongoDB

---

## 📝 Code Standards & Structure
1.  **File Naming:**
    * `.jsx` for all React components (UI files).
    * `.js` for all pure JavaScript files (e.g., custom hooks, data).
2.  **Styling:**
    * **Global (`src/index.css`):** Reserved for CSS resets, fonts, and global CSS variables only.
    * **Component-Specific:** All component styles must use CSS Modules (.module.css).
    * **Theme Management:** All theme-related styling will use CSS Custom Properties (e.g., `var(--background-color)`).
3.  **Project Organization:**
    * `src/components/`: For reusable UI components.
    * `src/hooks/`: For all custom React hooks and stateful logic.
    * `src/`: For top-level files like `App.jsx` and `index.js`.
4.  **Path Map:**
    * All new components and their related files must be placed in their own subdirectory within `src/components/`. Example: `src/components/NewComponent/NewComponent.jsx`.

---

## 🚀 Project Path Map
```

portfolio2023-main/
├── package.json
├── public/
│   └── index.html
│   └── favicon.ico
├── src/
│   ├── App.jsx
│   ├── App.module.css
│   ├── components/
│   │   ├── About/
│   │   │   ├── About.jsx
│   │   │   └── About.module.css
│   │   ├── assets/
│   │   ├── Burger.jsx
│   │   ├── ContactForm.jsx
│   │   ├── Footer.jsx
│   │   ├── HeroCard.jsx
│   │   ├── ProjectCard.jsx
│   │   ├── Section.jsx
│   │   ├── SocialFollow.jsx
│   │   └── Video.jsx
│   ├── hooks/
│   │   └── useTheme.js
│   ├── index.css
│   └── index.js

```
```

-----

## ✅ Best Practices

  * **Functional Components:** Use functional components and hooks for state logic.
  * **Accessibility (A11y):** Prioritize semantic HTML and ARIA compliance.
  * **Code Quality:** Enforce a strict code style with ESLint and Prettier.
  * **Verification:** All work is double-checked for functionality before completion.

-----

## 🔮 Future Enhancements

  * **TypeScript:** Migrate to `.tsx` for static typing.
  * **Performance:** Implement code splitting (`React.lazy`) and memoization (`React.memo`, `useCallback`).
  * **Testing:** Introduce unit tests using Jest and React Testing Library.

<!-- end list -->

```
```